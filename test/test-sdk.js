// –¢–µ—Å—Ç EMD Cloud SDK
require('dotenv').config({ path: '.env.local' });
const { EmdCloud } = require('@emd-cloud/sdk');

async function testSDK() {
  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK...');
    
    const emdCloud = new EmdCloud({
      environment: 'server',
      appId: process.env.EMD_APP_ID,
      apiToken: process.env.EMD_API_TOKEN
    });

    console.log('‚úÖ SDK –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    console.log('App ID:', process.env.EMD_APP_ID);
    console.log('Collection ID:', process.env.TOURNAMENTS_COLLECTION_ID);

    const db = emdCloud.database(process.env.TOURNAMENTS_COLLECTION_ID);

    console.log('\nüîÑ –¢–µ—Å—Ç 1: –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...');
    try {
      const result1 = await db.getRows();
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', Array.isArray(result1) ? `${result1.length} –∑–∞–ø–∏—Å–µ–π` : typeof result1);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', e.message);
    }

    console.log('\nüîÑ –¢–µ—Å—Ç 2: –° –ø—É—Å—Ç—ã–º –æ–±—ä–µ–∫—Ç–æ–º...');
    try {
      const result2 = await db.getRows({});
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', Array.isArray(result2) ? `${result2.length} –∑–∞–ø–∏—Å–µ–π` : typeof result2);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', e.message);
    }

    console.log('\nüîÑ –¢–µ—Å—Ç 3: –° limit –∏ page...');
    try {
      const result3 = await db.getRows({ limit: 10, page: 0 });
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', Array.isArray(result3) ? `${result3.length} –∑–∞–ø–∏—Å–µ–π` : typeof result3);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', e.message);
    }

    console.log('\nüîÑ –¢–µ—Å—Ç 4: –° authType...');
    try {
      const result4 = await db.getRows({ limit: 10, page: 0 }, { authType: 'api-token' });
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:', Array.isArray(result4) ? `${result4.length} –∑–∞–ø–∏—Å–µ–π` : typeof result4);
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', e.message);
    }

  } catch (error) {
    console.error('‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testSDK();
