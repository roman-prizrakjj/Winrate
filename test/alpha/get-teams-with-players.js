/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –∫–æ–º–∞–Ω–¥ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–π teams –∏ teams_participants
 */

const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '..', '..', '.env.local') });
const { EmdCloud, AppEnvironment, AuthType } = require('@emd-cloud/sdk');
const fs = require('fs');

// ============================================
// –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
// ============================================
const CONFIG = {
  TEAMS_COLLECTION_ID: process.env.TEAMS_COLLECTION_ID,
  PARTICIPANTS_COLLECTION_ID: process.env.TEAMS_PARTICIPANTS_COLLECTION_ID,
  LIMIT_PER_PAGE: 100,
  USE_HUMAN_READABLE: true,
  SAVE_TO_JSON: true,
};

// –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ä–æ–ª–µ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
const ROLE_MAPPING = {
  '36812ba6-b171-40c9-b608-f1514ef117e2': 'captain',    // –ö–∞–ø–∏—Ç–∞–Ω
  'cb0494c5-992d-4789-aa2f-58c7fb3e120f': 'player',     // –ò–≥—Ä–æ–∫
  'c18c129d-0386-4016-a2d1-93850f5da4d4': 'substitute'  // –ó–∞–ø–∞—Å–Ω–æ–π
};

// ============================================
// –§–£–ù–ö–¶–ò–ò –£–¢–ò–õ–ò–¢–´
// ============================================

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
 */
function saveToJson(data, filename) {
  if (!CONFIG.SAVE_TO_JSON) return;
  
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const fullFilename = `${filename}-${timestamp}.json`;
  const filepath = path.join(__dirname, fullFilename);
  
  fs.writeFileSync(filepath, JSON.stringify(data, null, 2), 'utf-8');
  console.log(`\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${fullFilename}`);
  return fullFilename;
}

// ============================================
// –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
// ============================================

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
async function getAllTeams(client, collectionId) {
  console.log('\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥...');
  
  const db = client.database(collectionId);
  const allTeams = [];
  let page = 0;
  let hasMore = true;
  
  while (hasMore) {
    console.log(`   –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ${CONFIG.LIMIT_PER_PAGE} –∑–∞–ø–∏—Å–µ–π...`);
    
    try {
      const result = await db.getRows({
        limit: CONFIG.LIMIT_PER_PAGE,
        page: page,
        useHumanReadableNames: CONFIG.USE_HUMAN_READABLE,
      });
      
      console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: ${result.length} –∑–∞–ø–∏—Å–µ–π`);
      
      if (result.length === 0) {
        hasMore = false;
      } else {
        allTeams.push(...result);
        page++;
        
        if (result.length < CONFIG.LIMIT_PER_PAGE) {
          hasMore = false;
        }
      }
      
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page + 1}:`, error.message);
      hasMore = false;
    }
  }
  
  console.log(`‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ${allTeams.length}`);
  return allTeams;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å–ø–∏—Å–∫—É ID —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 */
async function getAllParticipants(client, collectionId, participantIds) {
  console.log(`\nüë• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–≤—Å–µ–≥–æ ID: ${participantIds.length})...`);
  
  if (participantIds.length === 0) {
    console.log('‚ö†Ô∏è  –ù–µ—Ç ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
    return [];
  }
  
  const db = client.database(collectionId);
  const allParticipants = [];
  let page = 0;
  let hasMore = true;
  
  while (hasMore) {
    console.log(`   –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ${CONFIG.LIMIT_PER_PAGE} –∑–∞–ø–∏—Å–µ–π...`);
    
    try {
      const result = await db.getRows({
        limit: CONFIG.LIMIT_PER_PAGE,
        page: page,
        useHumanReadableNames: CONFIG.USE_HUMAN_READABLE,
      });
      
      console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: ${result.length} –∑–∞–ø–∏—Å–µ–π`);
      
      if (result.length === 0) {
        hasMore = false;
      } else {
        allParticipants.push(...result);
        page++;
        
        if (result.length < CONFIG.LIMIT_PER_PAGE) {
          hasMore = false;
        }
      }
      
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${page + 1}:`, error.message);
      hasMore = false;
    }
  }
  
  console.log(`‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${allParticipants.length}`);
  return allParticipants;
}

// ============================================
// –§–£–ù–ö–¶–ò–ò –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò
// ============================================

/**
 * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
function transformTeam(team) {
  return {
    _id: team._id || null,
    name: team.data?.name || null,
    school: team.data?.educational_organization?.data?.shortName || null,
    discipline: team.data?.discipline?.data?.name || null,
    division: team.data?.division?.data?.name || null,
    divisionId: team.data?.division?._id || null,
    teams_participants_ids: (team.data?.teams_participants || []).map(p => p._id || p).filter(Boolean),
  };
}

/**
 * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
 */
function transformParticipant(participant) {
  const user = participant.user || {};
  const customFields = user.customFields || {};
  const roleId = participant.data?.role || null;
  
  return {
    id: participant._id,
    userId: user._id || null,
    nickname: customFields.nickname || '–ë–µ–∑ –Ω–∏–∫–∞',
    telegram: customFields.telegram_id || null,
    role: ROLE_MAPPING[roleId] || 'unknown',
    roleId: roleId,
  };
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
 */
function getUniqueParticipantIds(teams) {
  const allIds = teams.flatMap(team => team.teams_participants_ids || []);
  const uniqueIds = [...new Set(allIds)];
  return uniqueIds;
}

/**
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
function mergeTeamsWithPlayers(teams, participants) {
  console.log('\nüîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...');
  
  // –°–æ–∑–¥–∞—ë–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ ID
  const participantsMap = new Map();
  participants.forEach(p => {
    participantsMap.set(p._id, p);
  });
  
  console.log(`   –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participantsMap.size} –∑–∞–ø–∏—Å–µ–π`);
  
  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
  const result = teams.map(team => {
    const players = team.teams_participants_ids
      .map(id => participantsMap.get(id))
      .filter(Boolean)
      .map(transformParticipant);
    
    return {
      id: team._id,
      name: team.name,
      school: team.school,
      discipline: team.discipline,
      division: team.division,
      divisionId: team.divisionId,
      playersCount: players.length,
      players: players,
    };
  });
  
  console.log(`‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ: ${result.length} –∫–æ–º–∞–Ω–¥ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏`);
  return result;
}

// ============================================
// –û–°–ù–û–í–ù–û–ô –ö–û–î
// ============================================

async function main() {
  console.log('=' .repeat(60));
  console.log('üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
  console.log('=' .repeat(60));
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.EMD_APP_ID || !process.env.EMD_API_TOKEN) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç EMD_APP_ID –∏–ª–∏ EMD_API_TOKEN –≤ .env.local');
    process.exit(1);
  }
  
  if (!CONFIG.TEAMS_COLLECTION_ID || !CONFIG.PARTICIPANTS_COLLECTION_ID) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TEAMS_COLLECTION_ID –∏–ª–∏ TEAMS_PARTICIPANTS_COLLECTION_ID');
    process.exit(1);
  }
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    console.log('\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ EMD Cloud SDK...');
    const client = new EmdCloud({
      environment: AppEnvironment.Server,
      appId: process.env.EMD_APP_ID,
      apiToken: process.env.EMD_API_TOKEN,
      defaultAuthType: AuthType.ApiToken
    });
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
    const startTime = Date.now();
    const allTeamsRaw = await getAllTeams(client, CONFIG.TEAMS_COLLECTION_ID);
    
    if (allTeamsRaw.length === 0) {
      console.log('\n‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞');
      return;
    }
    
    // –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    console.log('\nüîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥...');
    const teams = allTeamsRaw.map(transformTeam);
    console.log(`‚úÖ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: ${teams.length} –∫–æ–º–∞–Ω–¥`);
    
    // –®–∞–≥ 2: –°–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    console.log('\nüîç –°–±–æ—Ä ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥...');
    const participantIds = getUniqueParticipantIds(teams);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${participantIds.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const teamsWithoutPlayers = teams.filter(t => t.teams_participants_ids.length === 0);
    if (teamsWithoutPlayers.length > 0) {
      console.log(`‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥ –±–µ–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${teamsWithoutPlayers.length}`);
    }
    
    // –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const allParticipants = await getAllParticipants(client, CONFIG.PARTICIPANTS_COLLECTION_ID, participantIds);
    
    // –®–∞–≥ 4: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const teamsWithPlayers = mergeTeamsWithPlayers(teams, allParticipants);
    
    // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìä –ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:');
    const totalPlayers = teamsWithPlayers.reduce((sum, t) => sum + t.playersCount, 0);
    const avgPlayers = totalPlayers / teamsWithPlayers.length;
    const teamsWithNoPlayers = teamsWithPlayers.filter(t => t.playersCount === 0).length;
    const maxPlayers = Math.max(...teamsWithPlayers.map(t => t.playersCount));
    
    console.log(`   –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: ${teamsWithPlayers.length}`);
    console.log(`   –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: ${totalPlayers}`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É: ${avgPlayers.toFixed(1)}`);
    console.log(`   –ö–æ–º–∞–Ω–¥ –±–µ–∑ –∏–≥—Ä–æ–∫–æ–≤: ${teamsWithNoPlayers}`);
    console.log(`   –ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ: ${maxPlayers}`);
    
    // –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –∏–≥—Ä–æ–∫–∞–º–∏:');
    const exampleTeam = teamsWithPlayers.find(t => t.playersCount > 0) || teamsWithPlayers[0];
    console.log(JSON.stringify(exampleTeam, null, 2));
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (CONFIG.SAVE_TO_JSON) {
      const filename = saveToJson(teamsWithPlayers, 'teams-with-players-final');
      
      const fileSizeKB = (JSON.stringify(teamsWithPlayers).length / 1024).toFixed(2);
      console.log(`\nüìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${fileSizeKB} KB`);
    }
    
    const totalTime = ((Date.now() - startTime) / 1000).toFixed(2);
    console.log(`\n‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime}s`);
    
    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ –ì–û–¢–û–í–û!');
    console.log('='.repeat(60));
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
main();
