// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ (–∑–∞–ø–∏—Å–µ–π) –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
// –ó–∞–ø—É—Å–∫: node test/get-collection-rows.js

require('dotenv').config({ path: '.env.local' });
const fs = require('fs');
const path = require('path');

async function getCollectionRows() {
  const apiToken = process.env.MONGODB_API_TOKEN;
  const appId = process.env.MONGODB_APP_ID;
  const collectionId = process.env.TEST_COLLECTION_ID;
  
  if (!apiToken || !appId || !collectionId) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env.local: MONGODB_API_TOKEN, MONGODB_APP_ID, TEST_COLLECTION_ID');
    process.exit(1);
  }

  const url = `https://api.emd.one/api/${appId}/database/${collectionId}/row`;
  console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...');
  console.log(`üì° URL: ${url}`);
  console.log(`üóÇÔ∏è  Collection ID: ${collectionId}`);
  
  // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
  const requestBody = {
    search: "",                           // –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
    limit: 100,                             // 0 = –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
    page: 0,                              // –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    orderBy: "",                          // –ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sort: [],                             // –ü—Ä–∞–≤–∏–ª–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    query: {                              // MQL –∑–∞–ø—Ä–æ—Å
      $or: [],                            // –ò–õ–ò —É—Å–ª–æ–≤–∏—è
      $and: []                            // –ò —É—Å–ª–æ–≤–∏—è
    },
    hasOptimiseResponse: false,            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    useHumanReadableNames: true           // –ß–∏—Ç–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π
  };
  
  console.log('\nüìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:');
  console.log(JSON.stringify(requestBody, null, 2));
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'apitoken': apiToken,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });

    console.log(`\nüìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
      let recordCount = 'N/A';
      if (Array.isArray(data)) {
        recordCount = data.length;
      } else if (data.data && Array.isArray(data.data)) {
        recordCount = data.data.length;
      } else if (data.rows && Array.isArray(data.rows)) {
        recordCount = data.rows.length;
      }
      
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${recordCount}`);
      
      // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
      console.log('\nüìã –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏):');
      let previewData = [];
      if (Array.isArray(data)) {
        previewData = data.slice(0, 3);
      } else if (data.data && Array.isArray(data.data)) {
        previewData = data.data.slice(0, 3);
      } else if (data.rows && Array.isArray(data.rows)) {
        previewData = data.rows.slice(0, 3);
      }
      console.log(JSON.stringify(previewData, null, 2));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ JSON —Ñ–∞–π–ª
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const fileName = `rows-${collectionId.substring(0, 8)}-${timestamp}.json`;
      const filePath = path.join(__dirname, fileName);
      
      fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
      console.log(`\nüíæ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: test/${fileName}`);
      
      // –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
      const statsData = {
        collectionId,
        timestamp: new Date().toISOString(),
        recordCount,
        requestParams: requestBody,
        responseStructure: Object.keys(data)
      };
      
      const statsFileName = `rows-${collectionId.substring(0, 8)}-stats.json`;
      const statsFilePath = path.join(__dirname, statsFileName);
      
      fs.writeFileSync(statsFilePath, JSON.stringify(statsData, null, 2), 'utf8');
      console.log(`üíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: test/${statsFileName}`);
      
    } else {
      const errorText = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:');
      console.log(errorText);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const fileName = `rows-error-${timestamp}.json`;
      const filePath = path.join(__dirname, fileName);
      
      const errorData = {
        collectionId,
        status: response.status,
        statusText: response.statusText,
        error: errorText,
        requestBody
      };
      
      fs.writeFileSync(filePath, JSON.stringify(errorData, null, 2), 'utf8');
      console.log(`üíæ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: test/${fileName}`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫
getCollectionRows();
