// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ (–∑–∞–ø–∏—Å–µ–π) –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ + –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
// –ó–∞–ø—É—Å–∫: node test/get-collection-rows.js

require('dotenv').config({ path: '.env.local' });
const fs = require('fs');
const path = require('path');

async function getCollectionRows() {
  const apiToken = process.env.MONGODB_API_TOKEN;
  const appId = process.env.MONGODB_APP_ID;
  const collectionId = process.env.TOURNAMENTS_COLLECTION_ID;

  if (!apiToken || !appId || !collectionId) {
    console.error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (env)');
    process.exit(1);
  }

  const url = `https://api.emd.one/api/${appId}/database/${collectionId}/row`;
  console.log(`üì° –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ${collectionId}`);

  const requestBody = {
    search: "",
    limit: 100,
    page: 0,
    orderBy: "",
    sort: [],
    query: {
      $or: [],
      $and: []
    },
    hasOptimiseResponse: false,
    useHumanReadableNames: true
  };

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'apitoken': apiToken,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ API:", response.statusText);
      return;
    }

    const result = await response.json();
    const rows = result?.data || result?.rows || [];

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${rows.length}`);

    // üî• –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ _id –∏ title
    const cleanRows = rows.map(item => ({
      _id: item._id,
      title: item.data?.title ?? null
    }));

    const outputPath = path.join(__dirname, "clean-rows.json");
    fs.writeFileSync(outputPath, JSON.stringify(cleanRows, null, 2), "utf-8");

    console.log(`üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${outputPath}`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", err);
  }
}

getCollectionRows();
