// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –ø–æ ID
const { EmdCloud, AppEnvironment, AuthType } = require('@emd-cloud/sdk');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '..', '.env.local') });

// ID –∫–æ–º–∞–Ω–¥—ã (–ø–µ—Ä–µ–¥–∞–π—Ç–µ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–¥–µ—Å—å)
const TEAM_ID = process.argv[2] || '68f22b0ed8a472ea42c403da';

const CAPTAIN_ROLE_ID = '36812ba6-b171-40c9-b608-f1514ef117e2';

async function getTeamParticipants() {
  console.log(`\nüîç –ü–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: ${TEAM_ID}\n`);

  const client = new EmdCloud({
    environment: AppEnvironment.Server,
    appId: process.env.EMD_APP_ID,
    apiToken: process.env.EMD_API_TOKEN,
    defaultAuthType: AuthType.ApiToken,
  });

  const db = client.database(process.env.TEAMS_PARTICIPANTS_COLLECTION_ID);

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏ (–ë–ï–ó query - –ø—Ä–æ—Å—Ç–æ –≤—Å–µ –∑–∞–ø–∏—Å–∏)
    console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–ª—è–º–∏...\n');
    
    const TEAM_FIELD = 'col_804ae65a8e';  // team
    const ROLE_FIELD = 'col_18760881ff';  // role
    const TELEGRAM_FIELD = 'col_3d293c0ccf';  // telegram
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ (20 —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞ —Ä–∞–∑)
    console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏...\n');
    
    const allRows = [];
    const pageSize = 100;
    const parallelRequests = 20; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    let batchNumber = 0;
    let hasMore = true;
    
    while (hasMore) {
      // –°–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const startPage = batchNumber * parallelRequests;
      const promises = [];
      
      for (let i = 0; i < parallelRequests; i++) {
        const page = startPage + i;
        promises.push(
          db.getRows({
            limit: pageSize,
            page: page,
            useHumanReadableNames: false
          })
        );
      }
      
      console.log(`  –ë–∞—Ç—á ${batchNumber + 1}: –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${startPage + 1}-${startPage + parallelRequests}...`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const results = await Promise.all(promises);
      
      let batchRows = 0;
      let hasFullPage = false;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      results.forEach((result, index) => {
        const rows = Array.isArray(result) ? result : (result.data || []);
        if (rows.length > 0) {
          allRows.push(...rows);
          batchRows += rows.length;
          
          // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª–Ω–∞—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
          if (rows.length === pageSize) {
            hasFullPage = true;
          }
        }
      });
      
      console.log(`    –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${batchRows} –∑–∞–ø–∏—Å–µ–π (–≤—Å–µ–≥–æ: ${allRows.length})\n`);
      
      // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –ø–æ–ª–Ω–∞—è, –∑–Ω–∞—á–∏—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
      hasMore = hasFullPage;
      batchNumber++;
    }
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${allRows.length}\n`);
    
    // Debug: –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤ –ø–æ–ª–µ team —É –ø–µ—Ä–≤—ã—Ö 3 –∑–∞–ø–∏—Å–µ–π
    console.log('üîç DEBUG: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—è team –≤ –ø–µ—Ä–≤—ã—Ö –∑–∞–ø–∏—Å—è—Ö:\n');
    allRows.slice(0, 3).forEach((row, i) => {
      const teamValue = row.data?.[TEAM_FIELD];
      const teamType = typeof teamValue;
      const teamIsObject = teamValue && typeof teamValue === 'object';
      
      console.log(`[${i + 1}] team type: ${teamType}`);
      if (teamIsObject) {
        console.log(`    team._id: ${teamValue._id}`);
      } else {
        console.log(`    team value: ${teamValue}`);
      }
    });
    console.log('\n');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ ID –∫–æ–º–∞–Ω–¥—ã –∏–∑ –≤—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    const rows = allRows.filter(p => {
      const teamValue = p.data?.[TEAM_FIELD];
      const teamId = typeof teamValue === 'object' ? teamValue?._id : teamValue;
      return teamId === TEAM_ID;
    });
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã: ${rows.length}\n`);

    if (rows.length === 0) {
      console.log('‚ùå –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n');
      return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–µ
    const teamParticipants = rows;

    // –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    teamParticipants.forEach((p, i) => {
      const roleId = p.data?.[ROLE_FIELD];
      const isCaptain = roleId === CAPTAIN_ROLE_ID;
      const roleName = isCaptain ? 'üëë –ö–ê–ü–ò–¢–ê–ù' : (roleId === 'cb0494c5-992d-4789-aa2f-58c7fb3e120f' ? '‚≠ê –ò–≥—Ä–æ–∫' : 'üîÑ –ó–∞–ø–∞—Å–Ω–æ–π');
      
      const nickname = p.user?.customFields?.nickname || 'N/A';
      const telegram = p.data?.[TELEGRAM_FIELD] || p.user?.customFields?.telegram_id || 'N/A';
      const name = `${p.user?.firstName || ''} ${p.user?.lastName || ''}`.trim() || 'N/A';

      console.log(`${i + 1}. ${roleName}`);
      console.log(`   –ù–∏–∫: ${nickname}`);
      console.log(`   –ò–º—è: ${name}`);
      console.log(`   Telegram: ${telegram}`);
      console.log(`   Role ID: ${roleId}`);
      console.log('');
    });

    // –ò—â–µ–º –∫–∞–ø–∏—Ç–∞–Ω–∞
    const captain = teamParticipants.find(p => p.data?.[ROLE_FIELD] === CAPTAIN_ROLE_ID);
    
    if (captain) {
      console.log('üéØ –ö–ê–ü–ò–¢–ê–ù –ö–û–ú–ê–ù–î–´:');
      console.log(`   –ù–∏–∫: ${captain.user?.customFields?.nickname || 'N/A'}`);
      console.log(`   Telegram: ${captain.data?.[TELEGRAM_FIELD] || captain.user?.customFields?.telegram_id || 'N/A'}`);
    } else {
      console.log('‚ö†Ô∏è  –ö–∞–ø–∏—Ç–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã\n');
getTeamParticipants().then(() => {
  console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!\n');
  process.exit(0);
});
