// –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ EMD Cloud —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ª–æ–≥–∏–Ω–µ

const { EmdCloud, AppEnvironment, AuthType } = require('@emd-cloud/sdk');
require('dotenv').config({ path: '.env.local' });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SDK
const emdCloud = new EmdCloud({
  environment: AppEnvironment.Server,
  appId: process.env.EMD_APP_ID,
  apiToken: process.env.EMD_API_TOKEN,
  defaultAuthType: AuthType.ApiToken
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
function printSection(title, char = '=') {
  console.log('\n' + char.repeat(70));
  console.log(`  ${title}`);
  console.log(char.repeat(70));
}

function printSubSection(title) {
  console.log('\n' + '-'.repeat(70));
  console.log(`  ${title}`);
  console.log('-'.repeat(70));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JWT —Ç–æ–∫–µ–Ω–∞
function parseJWT(token) {
  try {
    const parts = token.split('.');
    if (parts.length !== 3) return null;
    
    const payload = Buffer.from(parts[1], 'base64').toString('utf-8');
    return JSON.parse(payload);
  } catch (e) {
    return null;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞
async function testLogin() {
  printSection('üîê –¢–ï–°–¢ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò EMD CLOUD', '=');
  
  // ‚ö†Ô∏è –í–°–¢–ê–í–¨–¢–ï –°–í–û–ò –£–ß–ï–¢–ù–´–ï –î–ê–ù–ù–´–ï –ó–î–ï–°–¨!
  const testEmail = 'rslahta@emd.one';
  const testPassword = 'Romka1914';
  
  console.log(`\nüìß Email: ${testEmail}`);
  console.log(`üîë Password: ${'*'.repeat(testPassword.length)}`);
  console.log(`üåê EMD APP ID: ${process.env.EMD_APP_ID}`);
  
  try {
    console.log('\n‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    const startTime = Date.now();
    
    const result = await emdCloud.auth.login({
      login: testEmail,
      password: testPassword
    });
    
    const duration = Date.now() - startTime;
    console.log(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! (${duration}ms)`);
    
    // ========== –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ ==========
    printSection('üì¶ –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ –û–¢ EMD CLOUD SDK');
    console.log(JSON.stringify(result, null, 2));
    
    // ========== –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ ==========
    printSection('üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –û–¢–í–ï–¢–ê');
    
    // –ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
    printSubSection('–ö–ª—é—á–∏ –≤ –∫–æ—Ä–Ω–µ –æ–±—ä–µ–∫—Ç–∞');
    Object.keys(result).forEach(key => {
      const value = result[key];
      const type = typeof value;
      const isObject = type === 'object' && value !== null;
      const isArray = Array.isArray(value);
      
      if (isArray) {
        console.log(`  ‚úì ${key}: Array[${value.length}]`);
      } else if (isObject) {
        console.log(`  ‚úì ${key}: Object {${Object.keys(value).length} keys}`);
      } else {
        const preview = type === 'string' && value.length > 50 
          ? value.substring(0, 50) + '...' 
          : value;
        console.log(`  ‚úì ${key}: ${type} = ${preview}`);
      }
    });
    
    // ========== –¢–û–ö–ï–ù ==========
    printSection('üé´ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–ö–ï–ù–ï');
    
    const token = result.token || result.accessToken || result.authToken;
    
    if (token) {
      console.log(`\n‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω!`);
      console.log(`  –ö–ª—é—á: ${result.token ? 'token' : result.accessToken ? 'accessToken' : 'authToken'}`);
      console.log(`  –î–ª–∏–Ω–∞: ${token.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`  –¢–∏–ø: ${typeof token}`);
      console.log(`  –ù–∞—á–∞–ª–æ: ${token.substring(0, 40)}...`);
      console.log(`  –ö–æ–Ω–µ—Ü: ...${token.substring(token.length - 20)}`);
      
      // –ü–∞—Ä—Å–∏–º JWT
      const payload = parseJWT(token);
      if (payload) {
        printSubSection('üìã –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JWT Payload');
        console.log(JSON.stringify(payload, null, 2));
        
        // –ê–Ω–∞–ª–∏–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        if (payload.exp) {
          const expiryDate = new Date(payload.exp * 1000);
          const now = new Date();
          const daysValid = Math.floor((expiryDate - now) / (1000 * 60 * 60 * 24));
          
          console.log(`\n‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞:`);
          console.log(`  –ò—Å—Ç–µ–∫–∞–µ—Ç: ${expiryDate.toLocaleString('ru-RU')}`);
          console.log(`  –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω: ${daysValid} –¥–Ω–µ–π`);
        }
        
        if (payload.iat) {
          const issuedDate = new Date(payload.iat * 1000);
          console.log(`  –í—ã–¥–∞–Ω: ${issuedDate.toLocaleString('ru-RU')}`);
        }
      } else {
        console.log('\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JWT —Ç–æ–∫–µ–Ω');
      }
    } else {
      console.log('\n‚ùå –¢–æ–∫–µ–Ω –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ!');
      console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –≤—ã—à–µ.');
    }
    
    // ========== –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ==========
    printSection('üë§ –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
    
    const user = result.user || result;
    
    if (result.user) {
      console.log('\n‚úÖ –û–±—ä–µ–∫—Ç "user" –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
      printSubSection('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ user');
      console.log(JSON.stringify(result.user, null, 2));
    } else {
      console.log('\n‚ö†Ô∏è –û—Ç–¥–µ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ "user" –Ω–µ—Ç, –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–Ω–µ –æ—Ç–≤–µ—Ç–∞');
    }
    
    printSubSection('–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    const userInfo = {
      id: user._id || user.id,
      email: user.login || user.email,
      firstName: user.firstName || user.first_name || '',
      lastName: user.lastName || user.last_name || '',
      createdAt: user.createdAt,
      updatedAt: user.updatedAt,
      accountStatus: user.accountStatus,
      accountVerified: user.accountVerified,
      space: user.space,
      level: user.level,
      points: user.points
    };
    
    Object.entries(userInfo).forEach(([key, value]) => {
      if (value !== undefined && value !== null && value !== '') {
        console.log(`  ‚úì ${key}: ${value}`);
      } else {
        console.log(`  ‚úó ${key}: (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)`);
      }
    });
    
    // ========== CUSTOM FIELDS ==========
    if (user.customFields) {
      printSection('üé® CUSTOM FIELDS (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è)');
      console.log(JSON.stringify(user.customFields, null, 2));
      
      printSubSection('–ê–Ω–∞–ª–∏–∑ customFields');
      Object.entries(user.customFields).forEach(([key, value]) => {
        const display = typeof value === 'string' && value 
          ? `"${value}"` 
          : value || '(–ø—É—Å—Ç–æ)';
        console.log(`  ‚Ä¢ ${key}: ${display}`);
      });
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
      if (user.customFields.role) {
        console.log(`\nüé≠ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.customFields.role}`);
      }
      
      if (user.customFields.nickname) {
        console.log(`üè∑Ô∏è  –ù–∏–∫–Ω–µ–π–º: ${user.customFields.nickname}`);
      }
    } else {
      printSection('üé® CUSTOM FIELDS');
      console.log('  ‚ùå customFields –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // ========== LINKED ACCOUNTS ==========
    if (user.linkedAccounts && Object.keys(user.linkedAccounts).length > 0) {
      printSection('üîó –°–í–Ø–ó–ê–ù–ù–´–ï –ê–ö–ö–ê–£–ù–¢–´');
      console.log(JSON.stringify(user.linkedAccounts, null, 2));
    }
    
    // ========== GET USER DETAILS ==========
    printSection('üîç –ü–û–õ–£–ß–ï–ù–ò–ï –î–ï–¢–ê–õ–ï–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (getUserDetails)');
    
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = user._id || user.id;
      console.log(`\nüìå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
      console.log('‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      if (token) {
        emdCloud.setAuthToken(token);
        console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è SDK');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userDetailsStart = Date.now();
      const userDetails = await emdCloud.user.getUserDetails(userId);
      const userDetailsDuration = Date.now() - userDetailsStart;
      
      console.log(`‚úÖ –î–µ—Ç–∞–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã! (${userDetailsDuration}ms)\n`);
      
      printSubSection('–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç getUserDetails');
      console.log(JSON.stringify(userDetails, null, 2));
      
      // ========== –°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ==========
      printSubSection('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: login() vs getUserDetails()');
      
      console.log('\nüîπ –ò–∑ login():');
      console.log(`  ID: ${user._id || user.id}`);
      console.log(`  Email: ${user.login || user.email}`);
      console.log(`  –ò–º—è: ${user.firstName || ''} ${user.lastName || ''}`);
      console.log(`  –ù–∏–∫–Ω–µ–π–º: ${user.customFields?.nickname || '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}`);
      console.log(`  –†–æ–ª—å: ${user.customFields?.role || '(–Ω–µ —É–∫–∞–∑–∞–Ω–∞)'}`);
      
      console.log('\nüîπ –ò–∑ getUserDetails():');
      console.log(`  ID: ${userDetails._id || userDetails.id}`);
      console.log(`  Email: ${userDetails.login || userDetails.email}`);
      console.log(`  –ò–º—è: ${userDetails.firstName || ''} ${userDetails.lastName || ''}`);
      console.log(`  –ù–∏–∫–Ω–µ–π–º: ${userDetails.customFields?.nickname || '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}`);
      console.log(`  –†–æ–ª—å: ${userDetails.customFields?.role || '(–Ω–µ —É–∫–∞–∑–∞–Ω–∞)'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
      const hasUserObject = !!result.user;
      console.log(`\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: login() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ${hasUserObject ? '–æ–±—ä–µ–∫—Ç user –æ—Ç–¥–µ–ª—å–Ω–æ' : '–¥–∞–Ω–Ω—ã–µ –≤ –∫–æ—Ä–Ω–µ –æ—Ç–≤–µ—Ç–∞'}`);
      console.log(`üìù getUserDetails() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—Ç –∂–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤ getUserDetails
      const loginFields = Object.keys(user);
      const detailsFields = Object.keys(userDetails);
      const extraFields = detailsFields.filter(f => !loginFields.includes(f));
      
      if (extraFields.length > 0) {
        console.log(`\nüÜï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ getUserDetails:`);
        extraFields.forEach(field => {
          console.log(`  ‚Ä¢ ${field}: ${userDetails[field]}`);
        });
      } else {
        console.log(`\n‚úÖ –û–±–∞ –º–µ—Ç–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π`);
      }
      
      // –ê–Ω–∞–ª–∏–∑ customFields
      if (userDetails.customFields) {
        const loginCustomKeys = Object.keys(user.customFields || {});
        const detailsCustomKeys = Object.keys(userDetails.customFields);
        const extraCustomFields = detailsCustomKeys.filter(k => !loginCustomKeys.includes(k));
        
        if (extraCustomFields.length > 0) {
          console.log(`\nüÜï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ customFields –≤ getUserDetails:`);
          extraCustomFields.forEach(key => {
            console.log(`  ‚Ä¢ ${key}: ${userDetails.customFields[key]}`);
          });
        }
      }
      
    } catch (userDetailsError) {
      console.log('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
      console.log(`  –¢–∏–ø: ${userDetailsError.constructor.name}`);
      console.log(`  –°–æ–æ–±—â–µ–Ω–∏–µ: ${userDetailsError.message}`);
      
      if (userDetailsError.response) {
        console.log('  –°—Ç–∞—Ç—É—Å:', userDetailsError.response.status);
        console.log('  –î–∞–Ω–Ω—ã–µ:', JSON.stringify(userDetailsError.response.data, null, 2));
      }
      
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('  ‚Ä¢ –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
      console.log('  ‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π');
      console.log('  ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    }
    
    // ========== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ö–û–î–ê ==========
    printSection('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –ö–û–î–ï');
    
    console.log('\nüìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:');
    console.log(`
const result = await emdCloud.auth.login({ login, password });

// –¢–æ–∫–µ–Ω
const token = result.token || result.accessToken;

// –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const user = result.user || result;
const userId = user._id || user.id;
const email = user.login || user.email;
const firstName = user.firstName || '';
const lastName = user.lastName || '';

// –†–æ–ª—å –∏ nickname
const role = user.customFields?.role || 'player';
const nickname = user.customFields?.nickname || '';
    `);
    
    console.log('\nüìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è AuthContext:');
    console.log(`
const userForContext = {
  id: user._id || user.id,
  email: user.login || user.email,
  firstName: user.firstName || '',
  lastName: user.lastName || '',
  nickname: user.customFields?.nickname || '',
  role: user.customFields?.role || 'player'
};
    `);
    
    // ========== –ò–¢–û–ì–ò ==========
    printSection('‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û');
    
    const summary = {
      '–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω': !!token,
      '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': !!(user._id || user.id),
      'Email –Ω–∞–π–¥–µ–Ω': !!(user.login || user.email),
      'customFields –Ω–∞–π–¥–µ–Ω—ã': !!user.customFields,
      '–†–æ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞': !!(user.customFields?.role),
      'Nickname –Ω–∞–π–¥–µ–Ω': !!(user.customFields?.nickname),
    };
    
    console.log('\nüìä –°–≤–æ–¥–∫–∞:');
    Object.entries(summary).forEach(([key, value]) => {
      const icon = value ? '‚úÖ' : '‚ö†Ô∏è';
      console.log(`  ${icon} ${key}`);
    });
    
    console.log('\nüéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
    console.log('üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—ã—à–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n');
    
  } catch (error) {
    printSection('‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò', '!');
    
    console.log(`\nüí• –¢–∏–ø –æ—à–∏–±–∫–∏: ${error.constructor.name}`);
    console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    
    if (error.response) {
      console.log('\nüì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
      console.log(JSON.stringify(error.response, null, 2));
    }
    
    if (error.stack) {
      console.log('\nüìö Stack trace:');
      console.log(error.stack);
    }
    
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('  1. –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
    console.log('  2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ EMD Cloud');
    console.log('  3. –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
    console.log('  4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º');
    console.log('  5. –ù–µ–≤–µ—Ä–Ω—ã–µ EMD_APP_ID –∏–ª–∏ EMD_API_TOKEN');
    
    console.log('\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('  ‚Ä¢ –§–∞–π–ª .env.local —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è');
    console.log('  ‚Ä¢ Email –∏ –ø–∞—Ä–æ–ª—å –≤ —ç—Ç–æ–º —Å–∫—Ä–∏–ø—Ç–µ (—Å—Ç—Ä–æ–∫–∏ 22-23)');
    console.log('  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å api.emd.one\n');
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
console.log('üöÄ –ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ EMD Cloud');
console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local...\n');

if (!process.env.EMD_APP_ID || !process.env.EMD_API_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  console.error('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª .env.local —Å–æ–¥–µ—Ä–∂–∏—Ç:');
  console.error('  - EMD_APP_ID');
  console.error('  - EMD_API_TOKEN\n');
  process.exit(1);
}

testLogin()
  .then(() => process.exit(0))
  .catch(err => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
    process.exit(1);
  });
