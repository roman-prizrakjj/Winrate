// API Route –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —ç—Ç–∞–ø–æ–≤ –ø–æ —Ç—É—Ä–Ω–∏—Ä—É
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞ –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —ç—Ç–∞–ø–æ–≤

import { NextResponse } from 'next/server';
import { emdCloud } from '@/lib/emd-cloud';

// üî• –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≥–æ—Ä—è—á–∏—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–º. docs/caching-guide.md)
export const dynamic = 'force-dynamic';
export const revalidate = 0;

export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const tournamentId = searchParams.get('tournamentId');

    if (!tournamentId) {
      return NextResponse.json(
        { error: '–ü–∞—Ä–∞–º–µ—Ç—Ä tournamentId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' },
        { status: 400 }
      );
    }

    const stagesCollectionId = process.env.STAGES_COLLECTION_ID;
    
    if (!stagesCollectionId) {
      return NextResponse.json(
        { error: 'STAGES_COLLECTION_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' },
        { status: 500 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —ç—Ç–∞–ø—ã (SDK –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–º –ø–æ–ª—è–º)
    const db = emdCloud.database(stagesCollectionId);
    const result: any = await db.getRows({
      limit: 100,
      page: 0,
      useHumanReadableNames: true
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
    const rows: any[] = Array.isArray(result) 
      ? result 
      : ('data' in result ? result.data : []);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —ç—Ç–∞–ø—ã –ø–æ —Ç—É—Ä–Ω–∏—Ä—É –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞
    const filteredRows = rows.filter((row: any) => {
      const rowTournamentId = row.data?.tournament?._id || row.data?.tournament;
      return rowTournamentId === tournamentId;
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–µ–ª–µ–∫—Ç–∞ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ order
    const stages = filteredRows
      .map((row: any) => ({
        id: row._id,
        title: row.data?.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        order: row.data?.order || 0
      }))
      .sort((a, b) => a.order - b.order); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É

    return NextResponse.json(stages, {
      headers: {
        // üî• –ó–∞–ø—Ä–µ—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö (—Å–º. docs/caching-guide.md)
        'Cache-Control': 'no-store, no-cache, must-revalidate, max-age=0'
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç—Ç–∞–ø–æ–≤:', error);
    return NextResponse.json(
      { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤' },
      { status: 500 }
    );
  }
}
