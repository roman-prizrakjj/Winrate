// API Route –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ MongoDB —á–µ—Ä–µ–∑ EMD Cloud SDK
// GET /api/team-stats

import { NextResponse } from 'next/server';
import { emdCloud, COLLECTIONS } from '@/lib/emd-cloud';

// –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ Next.js –¥–ª—è —ç—Ç–æ–≥–æ route (–¥–∞–Ω–Ω—ã–µ >2MB)
export const dynamic = 'force-dynamic';
export const revalidate = 0;

export async function GET() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if (!COLLECTIONS.TEAM_STATS) {
      console.error('‚ùå TEAM_STATS_COLLECTION_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return NextResponse.json(
        { error: 'Server configuration error' },
        { status: 500 }
      );
    }

    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ SDK...');

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const db = emdCloud.database(COLLECTIONS.TEAM_STATS);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ 100 –∑–∞–ø–∏—Å–µ–π)
    const allRows: any[] = [];
    let page = 0;
    let hasMore = true;

    while (hasMore) {
      const result = await db.getRows({
        limit: 100,
        page: page,
        useHumanReadableNames: true
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞
      if ('error' in result) {
        console.error('‚ùå –û—à–∏–±–∫–∞ SDK:', result.error);
        return NextResponse.json(
          { error: 'Failed to fetch team stats' },
          { status: 500 }
        );
      }

      // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
      const rows: any[] = Array.isArray(result) ? result : ('data' in result ? (result.data as any[]) : []);

      allRows.push(...rows);
      console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${rows.length} –∑–∞–ø–∏—Å–µ–π`);

      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ 100 - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
      hasMore = rows.length === 100;
      page++;
    }

    console.log(`‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${allRows.length}`);

    // –û—á–∏—Å—Ç–∫–∞ –∏ –º–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    const cleanRows = allRows.map((item: any) => ({
      id: item.data?.team?._id || item._id,
      name: item.data?.team?.data?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
      wins: item.data?.win || 0,
      losses: item.data?.loss || 0,
      draws: 0,  // –í MongoDB –Ω–µ—Ç draws –ø–æ–∫–∞
      i: 0,      // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
      cb: item.data?.buchholz || 0,
      s: item.data?.score || 0,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã)
      stage: item.data?.stage?.data?.title || "",
      tournamentTeamId: item.data?.tournament_team?._id || ""
    }));

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å HTTP –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (5 –º–∏–Ω—É—Ç)
    return NextResponse.json(cleanRows, {
      headers: {
        'Cache-Control': 'public, s-maxage=300, stale-while-revalidate=600'
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
