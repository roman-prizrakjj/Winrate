import { NextResponse } from 'next/server';
import { emdCloud } from '@/lib/emd-cloud';

// –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const dynamic = 'force-dynamic';
export const revalidate = 0;

export async function POST(request: Request) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const { email, password } = await request.json();

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!email || !password) {
      return NextResponse.json(
        { error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' },
        { status: 400 }
      );
    }

    console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', email);

    // –í—ã–∑—ã–≤–∞–µ–º SDK –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    let result;
    try {
      result = await emdCloud.auth.login({
        login: email,
        password: password
      });
    } catch (error: any) {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –æ—Ç SDK
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ EMD Cloud SDK:', error.message || error);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      const errorStr = String(error.message || error).toLowerCase();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (errorStr.includes('incorrect login') || errorStr.includes('incorrect password')) {
        errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
        console.log('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è:', email);
      } else if (errorStr.includes('user not found')) {
        errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
        console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', email);
      } else if (errorStr.includes('blocked') || errorStr.includes('disabled')) {
        errorMessage = '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
        console.log('‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:', email);
      } else if (errorStr.includes('network') || errorStr.includes('fetch')) {
        errorMessage = '–ù–µ—Ç —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
        console.error('üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ EMD Cloud');
      } else if (errorStr.includes('internal server error')) {
        errorMessage = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
        console.error('üî• Internal Server Error –æ—Ç EMD Cloud');
      }
      
      return NextResponse.json(
        { error: errorMessage },
        { status: 401 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if (!result || 'error' in result) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ SDK:', result ? (result as any).error : '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
      
      let errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      if (result && (result as any).error) {
        const errorStr = String((result as any).error).toLowerCase();
        
        if (errorStr.includes('credentials') || errorStr.includes('password')) {
          errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
        } else if (errorStr.includes('not found')) {
          errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
        } else if (errorStr.includes('blocked') || errorStr.includes('disabled')) {
          errorMessage = '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω';
        }
      }
      
      return NextResponse.json(
        { error: errorMessage },
        { status: 401 }
      );
    }

    // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', email);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const token = (result as any).token || (result as any).accessToken;
    const user = (result as any).user || result;

    if (!token) {
      console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç EMD Cloud');
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞' },
        { status: 500 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response = NextResponse.json({
      success: true,
      user: {
        id: user.id || user._id,
        email: user.email || user.login,
        firstName: user.firstName || user.first_name,
        lastName: user.lastName || user.last_name,
        role: user.role || 'user'
      }
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ HTTP-only cookie (–±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç XSS)
    response.cookies.set('auth_token', token, {
      httpOnly: true, // –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è JavaScript
      secure: process.env.NODE_ENV === 'production', // HTTPS —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
      sameSite: 'lax', // –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF
      maxAge: 60 * 60 * 24 * 7, // 7 –¥–Ω–µ–π
      path: '/' // –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    });

    return response;

  } catch (error: any) {
    // –§–∏–Ω–∞–ª—å–Ω—ã–π catch –¥–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message || error);
    console.error('üìç Stack trace:', error.stack);
    
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' },
      { status: 500 }
    );
  }
}
