import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';

// –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
export const dynamic = 'force-dynamic';
export const revalidate = 0;

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏)
function parseJWT(token: string) {
  try {
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(
      Buffer.from(base64, 'base64')
        .toString()
        .split('')
        .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
        .join('')
    );
    return JSON.parse(jsonPayload);
  } catch (e) {
    return null;
  }
}

export async function GET() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookies
    const cookieStore = await cookies();
    const token = cookieStore.get('auth_token')?.value;

    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!token) {
      return NextResponse.json(
        { authenticated: false },
        { status: 401 }
      );
    }

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');

    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
    const payload = parseJWT(token);
    
    if (!payload) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω');
      const response = NextResponse.json(
        { authenticated: false, error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω' },
        { status: 401 }
      );
      response.cookies.delete('auth_token');
      return response;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
    const now = Math.floor(Date.now() / 1000);
    if (payload.exp && payload.exp < now) {
      console.error('‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
      const response = NextResponse.json(
        { authenticated: false, error: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫' },
        { status: 401 }
      );
      response.cookies.delete('auth_token');
      return response;
    }

    // –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω
    console.log('‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω');

    return NextResponse.json({
      authenticated: true,
      user: {
        id: payload.userId || payload.sub || payload.id,
        email: payload.email || payload.login,
        firstName: payload.firstName || payload.first_name || '',
        lastName: payload.lastName || payload.last_name || '',
        nickname: payload.nickname || payload.customFields?.nickname || '',
        role: payload.customFields?.role || payload.role || 'player'
      }
    });

  } catch (error: any) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message || error);
    
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø—Ä–æ—Å–∏–º –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ
    const response = NextResponse.json(
      { authenticated: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.' },
      { status: 500 }
    );
    response.cookies.delete('auth_token');
    
    return response;
  }
}
