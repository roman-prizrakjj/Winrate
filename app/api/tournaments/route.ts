// API Route –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏–∑ MongoDB —á–µ—Ä–µ–∑ EMD Cloud SDK
// GET /api/tournaments

import { NextResponse } from 'next/server';
import { emdCloud, COLLECTIONS } from '@/lib/emd-cloud';

// –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ Next.js –¥–ª—è —ç—Ç–æ–≥–æ route (–¥–∞–Ω–Ω—ã–µ >2MB)
export const dynamic = 'force-dynamic';
export const revalidate = 0;

export async function GET() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if (!COLLECTIONS.TOURNAMENTS) {
      console.error('‚ùå TOURNAMENTS_COLLECTION_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return NextResponse.json(
        { error: 'Server configuration error' },
        { status: 500 }
      );
    }

    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã —á–µ—Ä–µ–∑ SDK...');

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    const db = emdCloud.database(COLLECTIONS.TOURNAMENTS);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ SDK
    const result = await db.getRows({
      limit: 100,
      page: 0,
      useHumanReadableNames: true
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞
    if ('error' in result) {
      console.error('‚ùå –û—à–∏–±–∫–∞ SDK:', result.error);
      return NextResponse.json(
        { error: 'Failed to fetch tournaments' },
        { status: 500 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
    const rows: any[] = Array.isArray(result) ? result : ('data' in result ? (result.data as any[]) : []);

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: ${rows.length}`);

    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ _id –∏ title
    const cleanRows = rows.map((item: any) => ({
      _id: item._id,
      title: item.data?.title ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    }));

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å HTTP –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    return NextResponse.json(cleanRows, {
      headers: {
        'Cache-Control': 'public, s-maxage=300, stale-while-revalidate=600'
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
