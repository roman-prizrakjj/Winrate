'use client';

import { useTransition } from 'react';
import { useRouter } from 'next/navigation';
import type { Tournament } from '@/lib/types/tournaments';
import TournamentList from './TournamentList';

interface TournamentsSectionProps {
  tournaments: Tournament[];
}

export default function TournamentsSection({ tournaments }: TournamentsSectionProps) {
  const router = useRouter();
  const [isPending, startTransition] = useTransition();

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Vercel (—á–µ—Ä–µ–∑ API) –∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö (router.refresh)
  const handleRefresh = async () => {
    startTransition(async () => {
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å API —Ä–µ–≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–¥–ª—è Vercel –∏ –ø–æ–¥–æ–±–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)
        const response = await fetch('/api/revalidate-create', { 
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        
        if (response.ok) {
          console.log('[Refresh] –†–µ–≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ API —É—Å–ø–µ—à–Ω–∞');
        } else {
          console.warn('[Refresh] API —Ä–µ–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        }
      } catch (error) {
        // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ self-hosted) - –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞
        console.log('[Refresh] API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º router.refresh() (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è non-Vercel)');
      } finally {
        // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤—ã–∑—ã–≤–∞–µ–º router.refresh() - —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
        router.refresh();
      }
    });
  };

  return (
    <section className="space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <h2 className="text-2xl font-bold text-white">
            –¢—É—Ä–Ω–∏—Ä—ã
          </h2>
          <div className="text-sm text-gray-400">
            –í—Å–µ–≥–æ: <span className="text-white font-semibold">{tournaments.length}</span>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å */}
        <button
          onClick={handleRefresh}
          disabled={isPending}
          className="
            flex items-center gap-2 px-4 py-1.5 flex-shrink-0
            bg-[#2581FF] hover:bg-[#1a6edb] text-white
            rounded-[8px] text-[14px] font-medium whitespace-nowrap
            transition-colors disabled:opacity-50 disabled:cursor-not-allowed
          "
          title="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤"
        >
          <span className={isPending ? 'animate-spin' : ''}>
            {isPending ? '‚è≥' : 'üîÑ'}
          </span>
          <span>{isPending ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å'}</span>
        </button>
      </div>

      <TournamentList tournaments={tournaments} />
    </section>
  );
}
