'use client';

import { useState, useMemo, useTransition, useRef } from 'react';
import { useRouter } from 'next/navigation';
import SearchInput from '@/components/SearchInput';
import StageList from '@/components/StageList';
import type { Stage } from '@/lib/types/stages';
import { STAGE_STATUSES } from '@/lib/stage-statuses';

interface StagesSectionProps {
  allStages: Stage[];
}

export default function StagesSection({ allStages }: StagesSectionProps) {
  const router = useRouter();
  const [isPending, startTransition] = useTransition();
  const stagesListRef = useRef<HTMLDivElement>(null);
  
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedTournament, setSelectedTournament] = useState<string>('all');
  const [selectedStatus, setSelectedStatus] = useState<string>('all');

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞
  const handleTournamentChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedTournament(e.target.value);
    // –°–∫—Ä–æ–ª–ª–∏–º –∫ –Ω–∞—á–∞–ª—É —Å–ø–∏—Å–∫–∞ —ç—Ç–∞–ø–æ–≤
    setTimeout(() => {
      stagesListRef.current?.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }, 100);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
  const handleStatusChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSelectedStatus(e.target.value);
    // –°–∫—Ä–æ–ª–ª–∏–º –∫ –Ω–∞—á–∞–ª—É —Å–ø–∏—Å–∫–∞ —ç—Ç–∞–ø–æ–≤
    setTimeout(() => {
      stagesListRef.current?.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }, 100);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Vercel (—á–µ—Ä–µ–∑ API) –∏ –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö (router.refresh)
  const handleRefresh = async () => {
    startTransition(async () => {
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å API —Ä–µ–≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–¥–ª—è Vercel –∏ –ø–æ–¥–æ–±–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º)
        const response = await fetch('/api/revalidate-create', { 
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        
        if (response.ok) {
          console.log('[Refresh] –†–µ–≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ API —É—Å–ø–µ—à–Ω–∞');
        } else {
          console.warn('[Refresh] API —Ä–µ–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        }
      } catch (error) {
        // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ self-hosted) - –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞
        console.log('[Refresh] API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º router.refresh() (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è non-Vercel)');
      } finally {
        // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –≤—ã–∑—ã–≤–∞–µ–º router.refresh() - —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
        router.refresh();
      }
    });
  };

  // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
  const tournaments = useMemo(() => {
    const uniqueTournaments = new Map<string, string>();
    allStages.forEach(stage => {
      if (!uniqueTournaments.has(stage.tournamentId)) {
        uniqueTournaments.set(stage.tournamentId, stage.tournamentTitle);
      }
    });
    return Array.from(uniqueTournaments.entries()).map(([id, title]) => ({ id, title }));
  }, [allStages]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —ç—Ç–∞–ø–æ–≤
  const filteredStages = useMemo(() => {
    let filtered = allStages;

    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —ç—Ç–∞–ø–∞ –∏–ª–∏ —Ç—É—Ä–Ω–∏—Ä—É
    if (searchTerm.trim()) {
      filtered = filtered.filter(stage =>
        stage.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        stage.tournamentTitle.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç—É—Ä–Ω–∏—Ä—É
    if (selectedTournament !== 'all') {
      filtered = filtered.filter(stage => stage.tournamentId === selectedTournament);
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (selectedStatus !== 'all') {
      filtered = filtered.filter(stage => stage.statusId === selectedStatus);
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ—Ä—è–¥–∫–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
    return filtered.sort((a, b) => a.order - b.order);
  }, [allStages, searchTerm, selectedTournament, selectedStatus]);

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ */}
      <div className="text-center space-y-4">
        <div>
          <h2 className="text-white text-2xl font-bold mb-2">
            –≠—Ç–∞–ø—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤
          </h2>
          <p className="text-white/60">
            –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞–º–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤
          </p>
        </div>

        {/* –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ */}
        <div className="flex justify-center">
          <SearchInput
            value={searchTerm}
            onChange={setSearchTerm}
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —ç—Ç–∞–ø–∞ –∏–ª–∏ —Ç—É—Ä–Ω–∏—Ä—É..."
            className="w-full max-w-md"
          />
        </div>

        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 flex-wrap">
          {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ç—É—Ä–Ω–∏—Ä—É */}
          <div className="flex items-center gap-3 flex-shrink-0">
            <label className="text-white/80 text-[14px] font-medium whitespace-nowrap">
              –¢—É—Ä–Ω–∏—Ä:
            </label>
            <select
              value={selectedTournament}
              onChange={handleTournamentChange}
              className="
                bg-[#282E3B] text-white border border-white/20 rounded-[8px]
                px-3 py-1.5 text-[14px] focus:outline-none focus:border-[#2581FF]
                min-w-[200px]
              "
            >
              <option value="all">–í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã</option>
              {tournaments.map((tournament) => (
                <option key={tournament.id} value={tournament.id}>
                  {tournament.title}
                </option>
              ))}
            </select>
          </div>

          {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É */}
          <div className="flex items-center gap-3 flex-shrink-0">
            <label className="text-white/80 text-[14px] font-medium whitespace-nowrap">
              –°—Ç–∞—Ç—É—Å:
            </label>
            <select
              value={selectedStatus}
              onChange={handleStatusChange}
              className="
                bg-[#282E3B] text-white border border-white/20 rounded-[8px]
                px-3 py-1.5 text-[14px] focus:outline-none focus:border-[#2581FF]
                min-w-[180px]
              "
            >
              <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
              {STAGE_STATUSES.map((status) => (
                <option key={status.id} value={status.id}>
                  {status.displayName}
                </option>
              ))}
            </select>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å */}
          <button
            onClick={handleRefresh}
            disabled={isPending}
            className="
              flex items-center gap-2 px-4 py-1.5 flex-shrink-0
              bg-[#2581FF] hover:bg-[#1a6edb] text-white
              rounded-[8px] text-[14px] font-medium whitespace-nowrap
              transition-colors disabled:opacity-50 disabled:cursor-not-allowed
            "
            title="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤"
          >
            <span className={isPending ? 'animate-spin' : ''}>
              {isPending ? '‚è≥' : 'üîÑ'}
            </span>
            <span>{isPending ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å'}</span>
          </button>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤ */}
      <div ref={stagesListRef}>
        <StageList stages={filteredStages} />
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="text-center text-white/50 text-sm">
        –ü–æ–∫–∞–∑–∞–Ω–æ —ç—Ç–∞–ø–æ–≤: {filteredStages.length} –∏–∑ {allStages.length}
      </div>
    </div>
  );
}
